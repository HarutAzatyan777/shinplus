import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { loginSuccess, logout } from '../redux/authSlice';
import { registerUser, loginUser } from '../api/api';
import { useNavigate } from 'react-router-dom';
import '../styles/AuthForm.css';

const AuthForm = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [repeatPassword, setRepeatPassword] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [message, setMessage] = useState('');

  const handleRegister = async () => {
    console.log('üìù Attempting to register with:', { email, password, repeatPassword });

    if (password !== repeatPassword) {
      setMessage('‘≥’°’≤’ø’∂’°’¢’°’º’•÷Ä’® ’π’•’∂ ’∞’°’¥’®’∂’Ø’∂’∏÷Ç’¥÷â');
      console.warn('‚ùå Passwords do not match');
      return;
    }

    try {
      const res = await registerUser(email, password);
      console.log('‚úÖ Registration successful:', res);

      setMessage('‘≥÷Ä’°’∂÷Å’∏÷Ç’¥’® ’∞’°’ª’∏’≤’æ’•÷Å÷â ’Ä’´’¥’° ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’´÷Ä÷â');
      setIsRegistering(false);
      setEmail('');
      setPassword('');
      setRepeatPassword('');
    } catch (err) {
      console.error('‚ùå Registration error:', err);
      setMessage(err.response?.data?.error || '’ç’≠’°’¨ ’£÷Ä’°’∂÷Å’¥’°’∂ ’™’°’¥’°’∂’°’Ø÷â');
    }
  };

  const handleLogin = async () => {
    console.log('üîê Attempting login with:', { email, password });

    try {
      const res = await loginUser(email, password);
      console.log('‚úÖ Login successful, response:', res);

      localStorage.setItem('token', res.data.token);
      dispatch(loginSuccess({ token: res.data.token, user: { email } }));
      setMessage('');
      navigate('/account');
    } catch (err) {
      console.error('‚ùå Login error:', err);
      setMessage(err.response?.data?.error || '’Ñ’∏÷Ç’ø÷Ñ’´ ’Ω’≠’°’¨÷â');
    }
  };

  const handleLogout = () => {
    console.log('üö™ Logging out');
    localStorage.removeItem('token');
    dispatch(logout());
    setEmail('');
    setPassword('');
    setRepeatPassword('');
    setMessage('');
    setIsRegistering(false);
    navigate('/login');
  };

  return (
    <div className="auth-form">
      <h2>{isRegistering ? '‘≥÷Ä’°’∂÷Å’∏÷Ç’¥' : '’Ñ’∏÷Ç’ø÷Ñ'}</h2>

      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={e => setEmail(e.target.value)}
      />

      <input
        type="password"
        placeholder="‘≥’°’≤’ø’∂’°’¢’°’º"
        value={password}
        onChange={e => setPassword(e.target.value)}
      />

      {isRegistering && (
        <input
          type="password"
          placeholder="‘ø÷Ä’Ø’∂’´÷Ä ’£’°’≤’ø’∂’°’¢’°’º’®"
          value={repeatPassword}
          onChange={e => setRepeatPassword(e.target.value)}
        />
      )}

      <button onClick={isRegistering ? handleRegister : handleLogin}>
        {isRegistering ? '‘≥÷Ä’°’∂÷Å’æ’•’¨' : '’Ñ’∏÷Ç’ø÷Ñ'}
      </button>

      <button
        onClick={() => {
          setIsRegistering(!isRegistering);
          setMessage('');
          setEmail('');
          setPassword('');
          setRepeatPassword('');
          console.log('üîÑ Switching form mode. Now:', isRegistering ? 'Login' : 'Register');
        }}
        className="switch-btn"
      >
        {isRegistering ? '‘±÷Ä’§’•’∂ ’∏÷Ç’∂’•’û’Ω ’∞’°’∑’´’æ' : '‘≥÷Ä’°’∂÷Å’æ’•’¨ ’∂’∏÷Ä ’∞’°’∑’´’æ’∏’æ'}
      </button>

      <button onClick={handleLogout} style={{ marginTop: '1rem' }}>
        ‘¥’∏÷Ç÷Ä’Ω ’£’°’¨
      </button>

      <p className="message">{message}</p>
    </div>
  );
};

export default AuthForm;
