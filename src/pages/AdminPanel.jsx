// src/components/AdminPanel.jsx
import React, { useEffect, useState, useCallback } from 'react';
import { fetchUsersAPI, deleteUserAPI, updateUserRoleAPI } from '../api/api';
import '../styles/AdminPanel.css'; // ’Ω’ø’°’∂’§’°÷Ä’ø css
import MakeAdmin from '../components/MakeAdmin';

const AdminPanel = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [actionLoading, setActionLoading] = useState(false);
  const [error, setError] = useState(null);
  const [message, setMessage] = useState('');

  const fetchUsers = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetchUsersAPI();
      const data = response.data;
      if (Array.isArray(data)) {
        setUsers(data);
      } else if (data && Array.isArray(data.users)) {
        setUsers(data.users);
      } else {
        setUsers([]);
        setError('API-’´÷Å ’Ω’ø’°÷Å’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’Ω’≠’°’¨ ’•’∂÷â');
      }
    } catch (err) {
      setError(err.message || '’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ’¢’•’º’∂’∏÷Ç’¥’® ’±’°’≠’∏’≤’æ’•÷Å÷â');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  const handleDelete = async (uid) => {
    if (!window.confirm('’é’Ω’ø’°’û’∞ ’•’Ω, ’∏÷Ä ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•’Ω ’ª’∂’ª’•’¨ ’°’µ’Ω ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®÷â')) return;
    setActionLoading(true);
    try {
      await deleteUserAPI(uid);
      setMessage('’ï’£’ø’°’ø’•÷Ä’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’ª’∂’ª’æ’•÷Å÷â');
      fetchUsers();
    } catch (err) {
      setError(err.message || '’ã’∂’ª’¥’°’∂ ’Ω’≠’°’¨÷â');
    } finally {
      setActionLoading(false);
    }
  };

  const handleRoleChange = async (uid, currentRole) => {
    const newRole = currentRole === 'admin' ? 'user' : 'admin';
    setActionLoading(true);
    try {
      await updateUserRoleAPI(uid, newRole);
      setMessage(`’ï’£’ø’°’ø’´÷Ä’∏’ª ’§’•÷Ä’® ÷É’∏’≠’æ’•÷Å’ù ${newRole}÷â`);
      fetchUsers();
    } catch (err) {
      setError(err.message || '‘¥’•÷Ä’´ ÷É’∏÷É’∏’≠’¥’°’∂ ’Ω’≠’°’¨÷â');
    } finally {
      setActionLoading(false);
    }
  };

  return (
    <div className="admin-panel">
      <h2>üëë ‘±’§’¥’´’∂ ’æ’°’∞’°’∂’°’Ø</h2>

      {loading ? (
        <p>‘≤’•’º’∂’æ’∏÷Ç’¥ ’ß...</p>
      ) : error ? (
        <p className="error">{error}</p>
      ) : (
        <>
          {message && <p className="success">{message}</p>}

          <table className="user-table">
            <thead>
              <tr>
                <th>UID</th>
                <th>Email</th>
                <th>‘±’∂’∏÷Ç’∂</th>
                <th>‘¥’•÷Ä</th>
                <th>‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</th>
              </tr>
            </thead>
            <tbody>
              {users.length === 0 ? (
                <tr>
                  <td colSpan="5" className="no-users">’â’Ø’°’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä÷â</td>
                </tr>
              ) : (
                users.map(({ uid, email, name, role }) => (
                  <tr key={uid}>
                    <td>{uid}</td>
                    <td>{email}</td>
                    <td>{name || '-'}</td>
                    <td>{role || 'user'}</td>
                    <td>
                      <button
                        onClick={() => handleRoleChange(uid, role)}
                        disabled={actionLoading}
                      >
                        ’ì’∏’≠’•’¨ ’§’•÷Ä
                      </button>
                      <button
                        onClick={() => handleDelete(uid)}
                        disabled={actionLoading}
                        className="delete-btn"
                      >
                        ’ã’∂’ª’•’¨
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </>
      )}
      <MakeAdmin />
    </div>
  );
};

export default AdminPanel;
